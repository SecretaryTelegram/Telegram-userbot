import os
import random
import json
from datetime import datetime
from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# ===============================
# –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
# ===============================
API_ID = 21321325
API_HASH = "93e7c730ce8992e378b2225471f2f860"
SESSION_NAME = "afk_userbot"

# ===============================
# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
# ===============================
DATA_FILE = "afk_messages.json"
LOG_FILE = "afk_log.txt"

# ===============================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞
# ===============================
AFK_MODE = False
AFK_MESSAGES = []   # —Å–ø–∏—Å–æ–∫ AFK-—Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
AFK_PERSONAL = {}
AFK_ONLY_LS = False
AFK_CHATS = []
AFK_ONE_REPLY = True
AFK_RANDOM = True
AFK_START_TIME = None
ANTI_FLOOD = {}

# ===============================
# –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏
# ===============================
def load_afk_messages():
    global AFK_MESSAGES
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            AFK_MESSAGES = json.load(f)
    else:
        # –°—Ç–∞—Ä—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä "–±–æ–≥–∞—Ç—ã—Ö" –æ—Ç–≤–µ—Ç–æ–≤
        AFK_MESSAGES = [
            "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —É—á—Ç–µ–Ω–æ.",
            "–°–µ–π—á–∞—Å —è –∑–∞–Ω—è—Ç –≤–∞–∂–Ω—ã–º–∏ –¥–µ–ª–∞–º–∏. –û—Ç–≤–µ—á—É, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å.",
            "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ü–µ–Ω–Ω–æ –¥–ª—è –º–µ–Ω—è. –í–µ—Ä–Ω—É—Å—å –∏ –æ—Ç–≤–µ—á—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.",
            "–°–µ–π—á–∞—Å –Ω–∞—Ö–æ–∂—É—Å—å –≤–Ω–µ –¥–æ—Å—Ç—É–ø–∞. –ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ."
        ]
        save_afk_messages()

def save_afk_messages():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(AFK_MESSAGES, f, ensure_ascii=False, indent=2)

# ===============================
# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Pyrogram
# ===============================
app = Client(
    SESSION_NAME,
    api_id=API_ID,
    api_hash=API_HASH
)

# ===============================
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# ===============================
def can_reply(user_id):
    if AFK_ONE_REPLY and user_id in ANTI_FLOOD:
        return False
    ANTI_FLOOD[user_id] = True
    return True

def get_afk_text(user_id=None):
    if user_id in AFK_PERSONAL:
        return AFK_PERSONAL[user_id]
    if AFK_MESSAGES:
        if AFK_RANDOM:
            return random.choice(AFK_MESSAGES)
        else:
            return AFK_MESSAGES[0]
    return "–°–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."

# ===============================
# –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è AFK
# ===============================
@app.on_message(filters.command(["afk"], prefixes="/") & filters.me)
async def go_afk(client, message):
    global AFK_MODE, AFK_START_TIME, ANTI_FLOOD
    AFK_MODE = True
    AFK_START_TIME = datetime.now()
    ANTI_FLOOD.clear()
    await message.edit("‚úÖ –†–µ–∂–∏–º AFK –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")

@app.on_message(filters.command(["back"], prefixes="/") & filters.me)
async def back_from_afk(client, message):
    global AFK_MODE, AFK_START_TIME, ANTI_FLOOD
    AFK_MODE = False
    AFK_START_TIME = None
    ANTI_FLOOD.clear()
    await message.edit("‚úÖ –†–µ–∂–∏–º AFK –æ—Ç–∫–ª—é—á—ë–Ω.")

# ===============================
# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏ AFK
# ===============================
@app.on_message(filters.command(["addafk"], prefixes="/") & filters.me)
async def add_afk_message(client, message):
    global AFK_MESSAGES
    text = message.text.split(maxsplit=1)
    if len(text) < 2:
        await message.edit("‚ö†Ô∏è –£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
        return
    AFK_MESSAGES.append(text[1])
    save_afk_messages()
    await message.edit(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π AFK-–≤–∞—Ä–∏–∞–Ω—Ç:\n{text[1]}")

@app.on_message(filters.command(["listafk"], prefixes="/") & filters.me)
async def list_afk_messages(client, message):
    if not AFK_MESSAGES:
        await message.edit("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ AFK –ø—É—Å—Ç.")
        return
    text = "\n".join([f"{i+1}. {msg}" for i, msg in enumerate(AFK_MESSAGES)])
    await message.edit("üìú –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ AFK-–≤–∞—Ä–∏–∞–Ω—Ç—ã:\n\n" + text)

@app.on_message(filters.command(["delafk"], prefixes="/") & filters.me)
async def delete_afk_message(client, message):
    global AFK_MESSAGES
    args = message.text.split(maxsplit=1)
    if len(args) == 1:
        await message.edit("‚ö†Ô∏è –£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ 'all'.")
        return
    if args[1].lower() == "all":
        AFK_MESSAGES.clear()
        save_afk_messages()
        await message.edit("üóë –í—Å–µ AFK-–≤–∞—Ä–∏–∞–Ω—Ç—ã —É–¥–∞–ª–µ–Ω—ã.")
    else:
        try:
            idx = int(args[1]) - 1
            removed = AFK_MESSAGES.pop(idx)
            save_afk_messages()
            await message.edit(f"üóë –£–¥–∞–ª—ë–Ω –≤–∞—Ä–∏–∞–Ω—Ç: {removed}")
        except:
            await message.edit("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞.")

# ===============================
# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö
# ===============================
@app.on_message(filters.private | filters.group)
async def afk_reply(client, message):
    global AFK_MODE
    if not AFK_MODE:
        return
    if AFK_ONLY_LS and message.chat.type != "private":
        return
    if AFK_CHATS and message.chat.id not in AFK_CHATS:
        return
    if not can_reply(message.from_user.id if message.from_user else 0):
        return

    afk_text = get_afk_text(message.from_user.id if message.from_user else None)

    buttons = InlineKeyboardMarkup(
        [[InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", url="https://t.me/")]]
    )

    try:
        await message.reply(afk_text, reply_markup=buttons)
    except:
        pass

# ===============================
# –û—Ç–≤–µ—Ç –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
# ===============================
@app.on_message(filters.mentioned & filters.group)
async def mention_reply(client, message):
    global AFK_MODE
    if not AFK_MODE:
        return
    if not can_reply(message.from_user.id if message.from_user else 0):
        return
    reply_text = get_afk_text(message.from_user.id if message.from_user else None)
    try:
        await message.reply(reply_text)
    except:
        pass

# ===============================
# –ó–∞–ø—É—Å–∫ —é–∑–µ—Ä–±–æ—Ç–∞
# ===============================
if __name__ == "__main__":
    load_afk_messages()
    print("‚úÖ –Æ–∑–µ—Ä–±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")
    app.run()
